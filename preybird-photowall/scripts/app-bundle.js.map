{"version":3,"sources":["resources/elements/flickr-image.ts","app.ts","environment.ts","main.ts","resources/index.ts","C:/Code/photowall/preybird-photowall/preybird-photowall/src/resources/elements/image.interface.js","styles/_fonts.scss","styles/main.scss","styles/image.scss"],"names":[],"mappings":"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","file":"app-bundle.js","sourcesContent":["import { Image } from \"./image.interface\"\r\n\r\nexport class FlickrImage implements Image {   \r\n    linkBig: string;\r\n\r\n    constructor (public link: string, public title: string) {\r\n        this.linkBig = link;\r\n    }\r\n}","import { FlickrImage } from './resources/elements/flickr-image';\r\nimport { autoinject } from 'aurelia-framework';\r\nimport { HttpClient } from 'aurelia-fetch-client';\r\n\r\n\r\n@autoinject\r\nexport class App {\r\n  images: FlickrImage[] = [];\r\n  searchText = '';\r\n  title = 'My Photo Wall';\r\n\r\n  constructor(private http: HttpClient) {\r\n\r\n    // TODO: cors\r\n    // TODO: fetch from httpclientconfig.json\r\n    http.configure(config => {\r\n      config\r\n        .withBaseUrl(\"https://api.flickr.com/services/feeds/photos_public.gne/?format=json&nojsoncallback=1&tags=\")\r\n        .withDefaults({\r\n          credentials: 'same-origin',\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'X-Requested-With': 'Fetch',\r\n          }\r\n        })\r\n        .withInterceptor({\r\n          request(request) {\r\n            console.log(`Requesting ${request.method} ${request.url}`);\r\n            return request;\r\n          },\r\n          response(response) {\r\n            console.log(`Received ${response.status} ${response.url}`);\r\n            return response;\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n\r\n  async search() {\r\n    if (this.searchText) {\r\n      this.images = [];\r\n      // TODO: replace whitespace with comma\r\n      // Tags\r\n      let urlTags = this.searchText;\r\n\r\n      // Fetch\r\n      try {\r\n        var fetchOptions = { method: 'GET',               \r\n               mode: 'cors',\r\n               cache: 'default' };\r\n\r\n        let response = await this.http.fetch(urlTags, fetchOptions); \r\n        let data = await response.json();\r\n\r\n        let items = data.items;\r\n\r\n          // TODO: \r\n          // Process data, use base handler\r\n          for (let i of items) {\r\n            this.images.push(new FlickrImage(i.media.m, i.title))\r\n          }\r\n      }\r\n      catch (err) {\r\n        console.log(err);\r\n      }      \r\n\r\n      // Reset\r\n      this.searchText = '';\r\n    }\r\n  }\r\n}","export default {\r\n  debug: true,\r\n  testing: true\r\n};\r\n","import {Aurelia} from 'aurelia-framework'\r\nimport environment from './environment';\r\n\r\n//Configure Bluebird Promises.\r\n(<any>Promise).config({\r\n  warnings: {\r\n    wForgottenReturn: false\r\n  }\r\n});\r\n\r\nexport function configure(aurelia: Aurelia) {\r\n  aurelia.use\r\n    .standardConfiguration()\r\n    .feature('resources');\r\n\r\n  if (environment.debug) {\r\n    aurelia.use.developmentLogging();\r\n  }\r\n\r\n  if (environment.testing) {\r\n    aurelia.use.plugin('aurelia-testing');\r\n  }\r\n\r\n  aurelia.start().then(() => aurelia.setRoot());\r\n}\r\n","import {FrameworkConfiguration} from 'aurelia-framework';\r\n\r\nexport function configure(config: FrameworkConfiguration) {\r\n  //config.globalResources([]);\r\n}\r\n",null,"@import url('https://fonts.googleapis.com/css?family=Open+Sans|Pacifico');\r\n\r\n$font-pacifico: 'Pacifico', cursive;\r\n$font-opensans: 'Open Sans', sans-serif;\r\n\r\n$primary-font-family: $font-pacifico;\r\n$secondary-font-family: $font-opensans;\r\n\r\n$heading-font-color: mediumvioletred;\r\n$primary-font-color: darkgray;\r\n","@import './fonts';\r\n\r\nbody {\r\n    font-family: $secondary-font-family;\r\n    color: $primary-font-color;     \r\n}\r\n\r\nh1 {\r\n    font-family: $primary-font-family;\r\n    color: $heading-font-color; \r\n}","\r\n* {\r\n\r\n}"],"sourceRoot":"../src"}